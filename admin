#!/usr/bin/php
<?php
error_reporting(-1);
$help = array();

$help['help'] = "This is what you're looking at!";
function bf_help($args){
  echo "Commands are:\n";
  $funcs = get_defined_functions();
  global $help;
  foreach($funcs['user'] as $func){
    if(preg_match("@^bf_(.+){1,}@",$func,$matches)){
      $command = $matches[1];
      echo $command."\t".$help[$command]."\n";
    }
  }
}

$help['show'] = "Easy way to view posts. Optionally, pass the index to view a specific post. (e.g. show 1)";
function bf_show($args){
  $data = db_load();
  if( isset($args[1]) and (int) $args[1] > 0 ){
    $found = get_post($data,$args[1]);
    if(isset($found)){
      echo sep("TITLE");
      echo $found->title."\n";
      echo sep("TIME ",79,"=");
      echo date(DATE_RFC2822,$found->time)."\n";
      echo sep("BODY ",79,"=");
      echo $found->body."\n";
    } else {
      echo "Post not found.\n";
    }
  } else {
    $i = 1;
    foreach($data->posts as $time => $post){
      echo "[".str_pad($i,log10(count($data->posts)),"0",STR_PAD_LEFT)."] ".date("r",$time)." | ".$post->title."\n";
      $i++;
    }
  }
}

$help['new'] = "Allows you to make a new post.";
function bf_new($args){
  post_with_nano();
}

$help['edit'] = "Allows you to edit a specific post.";
function bf_edit($args){
  $data = db_load();
  if( isset($args[1]) and (int) $args[1] > 0 ){
    $found = get_post($data,$args[1]);
    if(isset($found)){
      post_with_nano($found);
    } else {
      echo "Post not found.\n";
    }
  }
}

$help['delete'] = "Allows you to delete a specific post.";
function bf_delete($args){
  $data = db_load();
  if( isset($args[1]) and (int) $args[1] > 0 ){
    $found = get_post($data,$args[1]);
    if(isset($found)){
      $ans = yesno("Are you sure you want to delete, `".$found->title."`?");
      if($ans){
        unset($data->posts[$found->time]);
        db_save($data);
      }
    } else {
      echo "Post not found.\n";
    }
  }
}

function get_post($data,$natural_index){
  $i = 1;
  foreach($data->posts as $time => $post){
    if($i == $natural_index){
      $found = $post;
      $found->time = $time;
      break;
    }
    $i++;
  }
  if(isset($found)){
    return $found;
  }
}

function post_with_nano($post=NULL){
  if(!isset($post)){
    $post = new stdClass();
  }
  if(!isset($post->title)){
    $post->title = "";
  }
  if(!isset($post->body)){
    $post->body = "";
  }
  if(isset($post->time)){
    $old_time = $post->time;
  } else {
    $post->time = time();
  }
  $done = FALSE;
  do {
    if(isset($raw)){
      $data = $raw;
    } else {
      $data = "HERRO\n[TITLE]".$post->title."[/TITLE]\n[TIME]".$post->time."[/TIME]\n[BODY]".$post->body."[/BODY]";
    }
    $temp = uniqid(1);
    file_put_contents(".temp_$temp",$data);
    passthru("nano .temp_$temp");
    $raw = file_get_contents(".temp_$temp");
    unlink(".temp_$temp");
    $post = new stdClass();
    $post->title = get_section($raw,"TITLE");
    $post->body = get_section($raw,"BODY");
    $post->time = get_section($raw,"TIME");
    if(validate_post($post)){
      $done = TRUE;
      if(isset($old_time)){
        $db = db_load();
        unset($db->posts[$old_time]);
        db_save($db);
      }
      add_post($post);
    } else {
      print_r($post);
      $ans = yesno("Errors Detected. Continue editing?");
      if(!$ans){
        $done = TRUE;
      }
    }
  } while(!$done);
}

function add_post($post){
  $new_post = new stdClass();
  $new_post->title = $post->title;
  $new_post->body = $post->body;
  $db = db_load();
  $db->posts[$post->time] = $new_post;
  db_save($db);
}

function yesno($q){
  do {
    $in = readline($q." [y/n]: ");
    if(preg_match("@^[Y|y]@",$in)){
      return TRUE;
    } elseif(preg_match("@^[N|n]@",$in)){
      return FALSE;
    } else {
      echo "Please answer `Yes` or `No`.\n";
    }
  } while(1);
}

function validate_post($post){
  if(!isset($post->title) or $post->title == ""){
    return FALSE;
  }
  if(!isset($post->body) or $post->body == ""){
    return FALSE;
  }
  if(!isset($post->time) or $post->time == ""){
    return FALSE;
  }
  return TRUE;
}

function get_section($raw,$section){
  preg_match("@\[".$section."\](.+){1,}\[\/".$section."\]@",$raw,$match);
  if(isset($match[1])){
    return $match[1];
  }
}

function sep($title){
  return str_pad("==== $title ",80,"=")."\n";
}

function db_load(){
  return unserialize(file_get_contents("db"));
}

function db_save($db){
  if(isset($db)){
    krsort($db->posts);
    file_put_contents("db",serialize($db));
  }
}

function run(){
  $input = "";
  do {
    $raw = readline("BlogFast> ");
    readline_add_history($raw);
    $input = explode(" ",$raw);
    if($raw!=''){
      if($input[0]!="exit"){
        $bf_func = "bf_".$input[0];
        if(function_exists($bf_func)){
          $bf_func($input);
        } else {
          bf_help(array("help"));
        }
      }
    }
  } while($input[0]!="exit");
}

run();